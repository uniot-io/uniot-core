/*
 * This is a part of the Uniot project.
 * Copyright (C) 2016-2025 Uniot <contact@uniot.io>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <Common.h>

/**
 * @file LispEvents.h
 * @brief Lisp interpreter event definitions for the Uniot event system
 * @defgroup lisp_events Lisp Events
 * @ingroup lisp
 * @{
 *
 * This file defines the event channels, topics, and messages used for
 * bi-directional communication between the embedded Lisp interpreter and
 * the host application. These events enable seamless integration of Lisp
 * scripting capabilities with the broader Uniot system.
 *
 * The event system uses FOURCC (Four Character Code) identifiers for efficient
 * event routing and minimal memory footprint. Lisp events are organized into:
 * - Channels: Data transmission pathways for different types of output
 * - Topics: Event categories for different communication patterns
 * - Messages: Specific event types within topics
 *
 * Communication flow:
 * - Output channels: Lisp → Application (stdout, logs, errors)
 * - Event channels: Bidirectional application ↔ Lisp event exchange
 * - Request topics: Lisp can request application services
 * - Event topics: Real-time event propagation between systems
 *
 * Example usage:
 * @code
 * // Send Lisp output to application
 * eventEmitter.sendDataToChannel(events::lisp::Channel::OUT_LISP,
 *                               Bytes(outputString));
 *
 * // Emit Lisp error event
 * eventEmitter.emitEvent(events::lisp::Topic::OUT_LISP_MSG,
 *                       events::lisp::Msg::OUT_MSG_ERROR);
 *
 * // Forward application event to Lisp
 * eventEmitter.sendDataToChannel(events::lisp::Channel::IN_EVENT,
 *                               Bytes(eventData));
 * @endcode
 */

namespace uniot::events::lisp {

/**
 * @brief Communication channels for data exchange between Lisp and the host application
 *
 * Defines data transmission channels that enable different types of information
 * flow between the embedded Lisp interpreter and the host application. Channels
 * use FOURCC identifiers for efficient routing and type safety.
 */
enum Channel {
  OUT_LISP = FOURCC(lout),      ///< Channel for standard Lisp output (stdout equivalent)
  OUT_LISP_LOG = FOURCC(llog),  ///< Channel for Lisp log messages and debug information
  OUT_LISP_ERR = FOURCC(lerr),  ///< Channel for Lisp error messages and exceptions
  OUT_EVENT = FOURCC(evou),     ///< Channel for outgoing events from Lisp to the application
  IN_EVENT = FOURCC(evin)       ///< Channel for incoming events from the application to Lisp
};

/**
 * @brief Topics for event-based communication
 *
 * Defines the main categories of events that facilitate communication between
 * the Lisp interpreter and the host application. Topics group related events
 * together and use FOURCC identifiers for efficient event handling.
 */
enum Topic {
  OUT_LISP_MSG = FOURCC(lisp),      ///< Topic for Lisp output messages and notifications
  OUT_LISP_REQUEST = FOURCC(lspr),  ///< Topic for Lisp requests to the application services
  OUT_LISP_EVENT = FOURCC(levo),    ///< Topic for outgoing events from Lisp to application
  IN_LISP_EVENT = FOURCC(levi)      ///< Topic for incoming events from application to Lisp
};

/**
 * @brief Message types used in event communication
 *
 * Defines specific event messages that can be sent within Lisp topics.
 * These messages represent different types of interactions and state changes
 * in the Lisp interpreter and its communication with the host application.
 */
enum Msg {
  OUT_MSG_ADDED,       ///< Standard output message was added to the output buffer
  OUT_MSG_LOG,         ///< Log message was generated by the Lisp interpreter
  OUT_MSG_ERROR,       ///< Error message was generated due to Lisp execution failure
  OUT_REFRESH_EVENTS,  ///< Request to refresh the event queue and process pending events
  OUT_NEW_EVENT,       ///< New outgoing event generated by Lisp for the application
  IN_NEW_EVENT         ///< New incoming event received from application for Lisp processing
};

}  // namespace uniot::events::lisp

/** @} */
